For this assignment, you will refactor “legacy” source code, code that you did not write, is probably not
what you’d have written, but you still have to maintain. You receive two files Game.java and
GameRunner.java from a colleague who has recently left your company. They may have been fired, or
maybe not, who knows.
These two files represent a Trivia game. However, because you did not write these files, obviously there
are some weaknesses in the design. Actually, the code looks quite awful, and it smells bad too.
Your tasks
1. Read the two source files carefully. Find out how the game should work, and try to run it.
2. Deliverable 1: Identify and shortly explain at least three distinct code smells in this code (write
them as a comment above your submission). For now you only have to explain the smells, you
will correct them in a later step. Use only the smells listed on refectoring.guru. Make sure that
you explain why the smell is bad and relate your explanation to the provided source.
3. Deliverable 2: Identify at least three weaknesses or flaws in the design of the source code.
Some examples to look for:
a. Could the code lead to bugs, or are there bugs in the code already?
b. Can we expand the functionality of the game without breaking existing code?
c. What are the pre and post conditions of the methods, how will some methods not
provide the correct post conditions or lead to unexpected results.
d. Things that are hardcoded but shouldn’t be.
e. Incorrect application of SOLID principles
f. Incorrect application of OOP
Write your answer as a comment above the source code or hand them in, in a separate pdf
document
4. Deliverable 3: Now, refactor your code to solve both the code smells you have described in step
2 and the design weaknesses/flaws described in step 3. Making sure that your unit tests work
after each refactoring step.
5. Deliverable 4: Write unit tests that test the following:
a. The correct/incorrect answering of questions
b. The changing of question categories and whether a question relating to the correct
category is asked
c. The roll method in the game class
You can use JUnit for this or another framework if you prefer it. Make sure that all tests pass
before continuing to the next step. Make sure that you test both the common cases, but also
outliers (if they apply). Moreover, make sure that you test a range of possible cases using the
correct assertions.
6.
7. Deliverable 5: Write a short description of how you have changed the code in step 5, making
sure to mention how you have solved the code smells and design flaws. Include a screenshot of
the results of your final unit test in your report.
Use these two links to find common code smells and refactoring techniques